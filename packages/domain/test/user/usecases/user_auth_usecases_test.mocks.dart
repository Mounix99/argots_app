// Mocks generated by Mockito 5.4.4 from annotations
// in domain/test/user/usecases/user_auth_usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:domain/core/errors/failure.dart' as _i5;
import 'package:domain/core/success_objects/success_object.dart' as _i7;
import 'package:domain/user/repositories/user_auth_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:supabase_flutter/supabase_flutter.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserAuthRepository extends _i1.Mock implements _i3.UserAuthRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AuthResponse>> signUpWithEmail({
    required String? email,
    required String? password,
    Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithEmail,
          [],
          {
            #email: email,
            #password: password,
            #data: data,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.AuthResponse>>.value(_FakeEither_0<_i5.Failure, _i6.AuthResponse>(
          this,
          Invocation.method(
            #signUpWithEmail,
            [],
            {
              #email: email,
              #password: password,
              #data: data,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.AuthResponse>>.value(_FakeEither_0<_i5.Failure, _i6.AuthResponse>(
          this,
          Invocation.method(
            #signUpWithEmail,
            [],
            {
              #email: email,
              #password: password,
              #data: data,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.AuthResponse>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AuthResponse>> signInWithEmail({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmail,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.AuthResponse>>.value(_FakeEither_0<_i5.Failure, _i6.AuthResponse>(
          this,
          Invocation.method(
            #signInWithEmail,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.AuthResponse>>.value(_FakeEither_0<_i5.Failure, _i6.AuthResponse>(
          this,
          Invocation.method(
            #signInWithEmail,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.AuthResponse>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.Success>> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.Success>>.value(_FakeEither_0<_i5.Failure, _i7.Success>(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i7.Success>>.value(_FakeEither_0<_i5.Failure, _i7.Success>(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.Success>>);
}

/// A class which mocks [AuthResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthResponse extends _i1.Mock implements _i6.AuthResponse {}
